module_name: Terraform ECS Service Module
module_description: The Terraform Wrapper for AWS ECS simplifies the configuration of the cluster service in the AWS cloud. This wrapper acts as a predefined template, making it easier to create and manage ECS services by handling all the technical details.
module_badges:
  - url: "https://github.com/gocloudLa/terraform-aws-wrapper-ecs/releases/latest"
    image: "https://img.shields.io/github/v/release/gocloudLa/terraform-aws-wrapper-ecs.svg?style=for-the-badge"
    alt: "Latest Release"
  - url: ""
    image: "https://img.shields.io/github/last-commit/gocloudLa/terraform-aws-wrapper-ecs.svg?style=for-the-badge"
    alt: "Last Commit"
  - url: "https://registry.terraform.io/modules/gocloudLa/wrapper-ecs/aws"
    image: "https://img.shields.io/badge/Terraform-Registry-7B42BC?style=for-the-badge&logo=terraform&logoColor=white"
    alt: "Terraform Registry"
quick_start: |
  ```hcl
  ecs_parameters = {
    ## Cluster Definition
    "00" = {
      ## Cluster Parameters Configuration
      cluster_settings = {
        name  = "containerInsights"
        value = "disabled"
      }
    }
  }
  ecs_defaults = var.ecs_defaults
  ```
features:
  - icon: üè¢
    title: Capacity Provider Management
    short_description: Supports multiple capacity providers for provisioned infrastructure
    long_description: |
      It allows defining and managing multiple capacity providers in case of requiring the use of provisioned infrastructure as an alternative to fargate + fargate_spot.
    examples:
      - title: Configuration Code
        code: |
          ```hcl
          ecs_parameters = {
              "00" = {
                cluster_settings = [{
                  name  = "containerInsights"
                  value = "disabled"
                }]
          
                default_capacity_provider_strategy = {
                  FARGATE = {
                    weight = 50
                  }
                  FARGATE_SPOT = {
                    weight = 50
                  }
                }
                autoscaling_capacity_providers = {}
          
                # Disable Cloudwatch
                # create_cloudwatch_log_group = false # Default: true
                # cluster_configuration = { execute_command_configuration = { logging = "DEFAULT" } }
          
                # Cloudwatch: retention
                # cloudwatch_log_group_retention_in_days = 14
              }
            }
          ```
important_notes: |
  - **‚ÑπÔ∏è Enable Container Insights:** Enables Container Insights, which generates additional costs - set `enable_container_insights = true`
  - **‚ö†Ô∏è Cluster Settings:** The `cluster_settings` parameter expects a list of maps with `name` and `value` keys
  - **‚ö†Ô∏è Task Execution Role:** When `create_task_exec_iam_role = true`, ensure proper IAM permissions are configured
  - **‚ö†Ô∏è CloudWatch Logs:** Default logging configuration uses OVERRIDE mode with custom log group naming
input_table: |
  | cluster_settings | Configuration block(s) with cluster settings. | `list` | ```[{ "name": "containerInsights", "value": "enabled" }]``` | no |
  | cluster_configuration | The execute command configuration for the cluster. | `map` | ```{ execute_command_configuration = { logging = "OVERRIDE", log_configuration = { cloud_watch_log_group_name = "/aws/ecs/${local.common_name}-${each.key}" } } }``` | no |
  | default_capacity_provider_strategy | Map of default capacity provider strategy definitions to use for the cluster. | `map` | ```{ FARGATE = { weight = 0 } }``` | no |
  | autoscaling_capacity_providers | Map of autoscaling capacity provider definitions to create for the cluster. | `map` | ```{}``` | no |
  | create_cloudwatch_log_group | Create a CloudWatch log group. | `bool` | `true` | no |
  | cloudwatch_log_group_class | Specifies the log class of the log group. | `string` | `null` | no |
  | cloudwatch_log_group_kms_key_id | Determines the KMS key id. | `string` | `null` | no |
  | cloudwatch_log_group_name | Name of the CloudWatch group. | `string` | `null` | no |
  | cloudwatch_log_group_retention_in_days | Days of retention of the CloudWatch group. | `number` | `14` | no |
  | cloudwatch_log_group_tags | Tags to apply to the CloudWatch log group. | `map` | ```{}``` | no |
  | cluster_service_connect_defaults | Default configuration for the service connection in the cluster. | `map` | ```{}``` | no |
  | create_task_exec_iam_role | Determines the creation of an IAM role for task execution. | `bool` | `false` | no |
  | create_task_exec_policy | Determines the creation of an IAM policy for task execution. | `bool` | `false` | no |
  | task_exec_iam_role_description | Description of the IAM role for task execution. | `string` | `null` | no |
  | task_exec_iam_role_name | Name of the IAM role for task execution. | `string` | `null` | no |
  | task_exec_iam_role_path | Path of the IAM role for task execution. | `string` | `null` | no |
  | task_exec_iam_role_permissions_boundary | Permissions boundary for the IAM role for task execution. | `string` | `null` | no |
  | task_exec_iam_role_policies | Policies to attach to the IAM role for task execution. | `map` | ```{}``` | no |
  | task_exec_iam_role_tags | Tags to apply to the IAM role for task execution. | `map` | ```{}``` | no |
  | task_exec_iam_role_use_name_prefix | Whether to use name prefix for the IAM role for task execution. | `bool` | `true` | no |
  | task_exec_iam_statements | IAM policy statements for the task execution role. | `map` | ```{}``` | no |
  | task_exec_secret_arns | Secret ARNs for the task execution role. | `list` | ```["arn:aws:secretsmanager:*:*:secret:*"]``` | no |
  | task_exec_ssm_param_arns | SSM parameter ARNs for the task execution role. | `list` | ```["arn:aws:ssm:*:*:parameter/*"]``` | no |
